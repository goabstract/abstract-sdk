// @flow

export type OrganizationDescriptor = {|
  organizationId: string
|};

export type ProjectDescriptor = {|
  projectId: string
|};

type ObjectDescriptor = {|
  projectId: string,
  sha?: string, // undefined is "latest"

  // Require branchId across all objects
  branchId: $PropertyType<BranchDescriptor, "branchId"> // eslint-disable-line no-use-before-define
|};

export type CommitDescriptor = {|
  ...ObjectDescriptor,
  sha: $NonMaybeType<$PropertyType<ObjectDescriptor, "sha">> // Commit is read by it's sha
|};

export type BranchDescriptor = {|
  ...ObjectDescriptor,
  branchId: string | "master"
|};

export type CollectionDescriptor = {|
  ...ObjectDescriptor,
  collectionId: string
|};

export type FileDescriptor = {|
  ...ObjectDescriptor,
  fileId: string
|};

export type PageDescriptor = {|
  ...ObjectDescriptor,
  fileId: string,
  pageId: string
|};

export type LayerDescriptor = {|
  ...ObjectDescriptor,
  sha: $NonMaybeType<$PropertyType<ObjectDescriptor, "sha">>, // Layer requires sha
  fileId: string,
  pageId: string,
  layerId: string
|};

export type Cursor<T> = Promise<{
  value: T,
  done: boolean
}> & {
  currentPage: number // possibly under pageInfo?
  // next(): <T>Cursor,
  // [Symbol.asyncIterator](): string
};

export type ListOptions = {
  limit?: number,
  offset?: number
};

export type ReviewStatus = "REQUESTED" | "REJECTED" | "APPROVED";

type PayloadBase = {
  id: string,
  createdAt: string,
  projectId: string,
  branchId: string,
  userId: string
};

export type PayloadBranchArchived = PayloadBase & {
  type: "BRANCH_ARCHIVED",
  payload: {
    branchName: string,
    previousStatus: string
  }
};

export type PayloadBranchCreated = PayloadBase & {
  type: "BRANCH_CREATED",
  payload: {
    branchName: string,
    branchDescription?: string
  }
};

export type PayloadBranchDeleted = PayloadBase & {
  type: "BRANCH_DELETED",
  payload: {
    branchName: string,
    previousStatus: string
  }
};

export type PayloadBranchDescriptionUpdated = PayloadBase & {
  type: "BRANCH_DESCRIPTION_UPDATED",
  payload: {
    branchName: string,
    branchDescription: string,
    previousDescription: string
  }
};

export type PayloadBranchRenamed = PayloadBase & {
  type: "BRANCH_RENAMED",
  payload: {
    branchName: string,
    previousName: string
  }
};

export type PayloadBranchStatusUpdated = PayloadBase & {
  type: "BRANCH_STATUS_UPDATED",
  payload: {
    branchName: string,
    previousStatus: string,
    status: string
  }
};

export type PayloadBranchUnarchived = PayloadBase & {
  type: "BRANCH_UNARCHIVED",
  payload: {
    branchName: string,
    status: string
  }
};

export type PayloadCollectionPublished = PayloadBase & {
  type: "COLLECTION_PUBLISHED",
  payload: {
    collectionId: string,
    name: string
  }
};

export type PayloadProjectArchived = PayloadBase & {
  type: "PROJECT_ARCHIVED",
  payload: {
    projectName: string
  }
};

export type PayloadProjectCreated = PayloadBase & {
  type: "PROJECT_CREATED",
  payload: {
    projectName: string
  }
};

export type PayloadProjectDeleted = PayloadBase & {
  type: "PROJECT_DELETED",
  payload: {
    projectName: string
  }
};

export type PayloadProjectDescriptionChanged = PayloadBase & {
  type: "PROJECT_DESCRIPTION_CHANGED",
  payload: {
    projectName: string
  }
};

export type PayloadProjectRenamed = PayloadBase & {
  type: "PROJECT_RENAMED",
  payload: {
    previousName: string,
    newName: string
  }
};

export type PayloadProjectUnarchived = PayloadBase & {
  type: "PROJECT_UNARCHIVED",
  payload: {
    projectName: string
  }
};

export type PayloadProjectTransferred = PayloadBase & {
  type: "PROJECT_TRANSFERRED",
  payload: {
    projectName: string,
    previousOrganizationName: string,
    newOrganizationName: string
  }
};

type PayloadCommitCommon = {
  pushActivityId: string,
  sha: string,
  title: string,
  description: string,
  branchName: string
};

export type PayloadCommit = PayloadBase & {
  type: "COMMIT",
  payload: PayloadCommitCommon
};

export type PayloadMergeCommit = PayloadBase & {
  type: "MERGE_COMMIT",
  payload: PayloadCommitCommon & {
    sourceBranchId: string,
    sourceBranchName: string,
    destinationBranchId: string,
    destinationBranchName: string
  }
};

export type PayloadUpdateCommit = PayloadBase & {
  type: "UPDATE_COMMIT",
  payload: PayloadCommitCommon & {
    sourceBranchId: string,
    sourceBranchName: string
  }
};

export type PayloadCommentCreated = PayloadBase & {
  type: "COMMENT_CREATED",
  payload: {
    reviewId?: string,
    reviewStatus?: ReviewStatus,
    commentFileId: ?string,
    commentFileName: ?string,
    commentId: string,
    commentLayerId: ?string,
    commentLayerName: ?string,
    commentPageId: ?string,
    commentPageName: ?string,
    commentParentId: ?string,
    commitBranchId: string,
    commitBranchName: string,
    commitSha: ?string,
    commitMessage: ?string
  }
};

export type PayloadReviewRequested = PayloadBase & {
  type: "REVIEW_REQUESTED",
  payload: {
    branchName: string,
    reviewerName: string,
    reviewerId: string
  }
};

export type PayloadReviewDismissed = PayloadBase & {
  type: "REVIEW_DISMISSED",
  payload: {
    branchName: string,
    reviewerName: string,
    reviewerId: string
  }
};

export type PayloadReviewerRemoved = PayloadBase & {
  type: "REVIEWER_REMOVED",
  payload: {
    branchName: string,
    reviewerName: string,
    reviewerId: string
  }
};

export type PayloadReviewCompleted = PayloadBase & {
  type: "REVIEW_COMPLETED",
  payload: {
    branchName: string,
    reviewerName: string,
    reviewerId: string,
    status: string
  }
};

export type Payload =
  | PayloadBranchArchived
  | PayloadBranchCreated
  | PayloadBranchDeleted
  | PayloadBranchDescriptionUpdated
  | PayloadBranchRenamed
  | PayloadBranchStatusUpdated
  | PayloadBranchUnarchived
  | PayloadCollectionPublished
  | PayloadCommentCreated
  | PayloadCommit
  | PayloadMergeCommit
  | PayloadProjectArchived
  | PayloadProjectCreated
  | PayloadProjectDeleted
  | PayloadProjectDescriptionChanged
  | PayloadProjectRenamed
  | PayloadProjectTransferred
  | PayloadProjectUnarchived
  | PayloadReviewCompleted
  | PayloadReviewDismissed
  | PayloadReviewRequested
  | PayloadReviewerRemoved
  | PayloadUpdateCommit;

export type Activity = {
  branchId: string,
  createdAt: string,
  id: string,
  payload: Payload,
  projectId: string,
  type:
    | "BRANCH_ARCHIVED"
    | "BRANCH_CREATED"
    | "BRANCH_DELETED"
    | "BRANCH_DESCRIPTION_UPDATED"
    | "BRANCH_RENAMED"
    | "BRANCH_STATUS_UPDATED"
    | "BRANCH_UNARCHIVED"
    | "COLLECTION_PUBLISHED"
    | "COMMENT_CREATED"
    | "COMMIT"
    | "MERGE_COMMIT"
    | "PROJECT_ARCHIVED"
    | "PROJECT_CREATED"
    | "PROJECT_DELETED"
    | "PROJECT_DESCRIPTION_CHANGED"
    | "PROJECT_RENAMED"
    | "PROJECT_TRANSFERRED"
    | "PROJECT_UNARCHIVED"
    | "REVIEWER_REMOVED"
    | "REVIEW_COMPLETED"
    | "REVIEW_DISMISSED"
    | "REVIEW_REQUESTED"
    | "UPDATE_COMMIT",
  userId: string
};

export type User = {
  id: string,
  email: string,
  primaryEmailId: string,
  createdAt: string,
  updatedAt: string,
  deletedAt: string,
  username: string,
  name: ?string,
  releaseChannel: ?string,
  avatarUrl: ?string
};

export type Organization = {
  id: string,
  name: string
};

export type Project = {
  id: string,
  name: string,
  about: ?string,
  description: ?string,
  color: ?string,
  createdAt: string,
  updatedAt: string,
  organizationId: string,
  createdByUser: User,
  deletedAt: ?string,
  archivedAt: ?string,
  firstPushedAt: string,
  pushedAt: ?string,
  repoCreatedAt: string,
  visibility: "organization" | "project",
  sizeInBytes: number,
  userIds: [string]
};

export type Annotation = {
  id: string,
  x: number,
  y: number,
  width: number,
  height: number,
  editing: boolean,
  scale: number,
  number: number
};

export type Comment = {
  id: string,
  annotation?: Annotation,
  body: string,
  createdAt: string,
  updatedAt: string,
  editedAt: string,
  deletedAt?: string,
  projectId: string,
  userId: string,
  branchId: string,
  commitSha: string,
  fileId: string,
  layerId: string,
  pageId: string,
  parentId?: string,
  reviewId?: string,
  reviewStatus?: ReviewStatus,
  replyIds: string[]
};

export type CollectionLayer = {
  id: string,
  collectionId: string,
  projectId: string,
  fileId: string,
  pageId: string,
  layerId: string,
  sha: string,
  isPinned: boolean,
  order: number
};

export type Collection = {
  id: string,
  userId: string,
  projectId: string,
  branchId: string,
  name: string,
  description: string,
  createdAt: string,
  publishedAt: string,
  layers: string[]
};

export type Commit = {
  sha: string,
  projectId: string,
  type:
    | "PROJECT_CREATED"
    | "FILE_ADDED"
    | "FILE_RENAMED"
    | "FILE_DELETED"
    | "FILE_REPLACED"
    | "FILE_UPGRADED"
    | "LIBRARY_ADDED"
    | "LIBRARY_REMOVED"
    | "RESTORE"
    | "UPDATE"
    | "MERGE"
    | "NORMAL",
  time: string,
  title: string,
  description: ?string,
  userName: ?string,
  userId: ?string,
  fileIds: string[],
  parents: string[],
  destinationBranchId: ?string,
  destinationBranchName: ?string,
  sourceBranchId: ?string,
  sourceBranchName: ?string
};

export type Branch = {
  id: string,
  name: string,
  description: ?string,
  userName: ?string,
  userId: ?string,
  createdAt: string,
  updatedAt: string,
  status: ?string,
  parent: ?string,
  startedAtSha: ?string,
  head: string,
  mergeSha: ?string,
  mergedIntoBranchId: ?string,
  divergedFromBranchId: ?string,
  projectId: string,
  user: User
};

export type ChangesetStatus =
  | "added"
  | "deleted"
  | "edited"
  | "edited-indirectly"
  | "none";

export type ChangesetFileChange = {
  type: "file",
  status: ChangesetStatus,
  hasPreview: false,
  meta: { [key: string]: [any, any] },
  fileId: string,
  pageId: void,
  layerId: void,
  colorsId: void,
  gradientId: void,
  layerStyleId: void,
  textStyleId: void
};

export type ChangesetPageChange = {
  type: "page",
  status: ChangesetStatus,
  hasPreview: false,
  meta: { [key: string]: [any, any] },
  fileId: string,
  pageId: string,
  layerId: void,
  colorsId: void,
  gradientId: void,
  layerStyleId: void,
  textStyleId: void
};

export type ChangesetLayerChange = {
  type: "layer" | "symbol" | "artboard",
  status: ChangesetStatus,
  hasPreview: boolean,
  meta: { [key: string]: [any, any] },
  fileId: string,
  pageId: string,
  layerId: string,
  colorsId: void,
  gradientId: void,
  layerStyleId: void,
  textStyleId: void
};

export type ChangesetColorsChange = {
  type: "colors",
  status: ChangesetStatus,
  hasPreview: boolean,
  meta: { [key: string]: [any, any] },
  fileId: string,
  pageId: void,
  layerId: void,
  colorsId: string,
  gradientId: void,
  layerStyleId: void,
  textStyleId: void
};

export type ChangesetGradientChange = {
  type: "gradient",
  status: ChangesetStatus,
  hasPreview: boolean,
  meta: { [key: string]: [any, any] },
  fileId: string,
  pageId: void,
  layerId: void,
  colorsId: void,
  gradientId: string,
  layerStyleId: void,
  textStyleId: void
};

export type ChangesetLayerStyleChange = {
  type: "layer-style",
  status: ChangesetStatus,
  hasPreview: boolean,
  meta: { [key: string]: [any, any] },
  fileId: string,
  pageId: void,
  layerId: void,
  colorsId: void,
  gradientId: void,
  layerStyleId: string,
  textStyleId: void
};

export type ChangesetTextStyleChange = {
  type: "text-style",
  status: ChangesetStatus,
  hasPreview: boolean,
  meta: { [key: string]: [any, any] },
  fileId: string,
  pageId: void,
  layerId: void,
  colorsId: void,
  gradientId: void,
  layerStyleId: void,
  textStyleId: string
};

export type ChangesetChange =
  | ChangesetFileChange
  | ChangesetPageChange
  | ChangesetLayerChange
  | ChangesetColorsChange
  | ChangesetGradientChange
  | ChangesetLayerStyleChange
  | ChangesetTextStyleChange;

export type Changeset = {
  id: string,
  sha: string,
  compareToSha: string,
  changes: ChangesetChange[],
  projectId: string,
  branchId: string
};

export type Page = {
  id: string,
  name: string,
  type: "" | "library",
  projectId: string,
  sha: string,
  fileId: string,
  order: number
};

export type Layer = {
  id: string,
  name: string,
  type: string,
  width: number,
  height: number,
  x: number,
  y: number,
  lastChangedIn: string,
  lastChangedAtSha: string,
  projectId: string,
  sha: string,
  fileId: string,
  pageId: string,
  libraryId?: string,
  status?: string,
  updatedAt: string,
  order: number
};

export type LayerBlendModeNormal = 0;
export type LayerBlendModeDarken = 1;
export type LayerBlendModeMultiply = 2;
export type LayerBlendModeColorBurn = 3;
export type LayerBlendModeLighten = 4;
export type LayerBlendModeScreen = 5;
export type LayerBlendModeAdd = 6;
export type LayerBlendModeOverlay = 7;
export type LayerBlendModeSoftLight = 8;
export type LayerBlendModeHardLight = 9;
export type LayerBlendModeDifference = 10;
export type LayerBlendModeExclusion = 11;
export type LayerBlendModeHue = 12;
export type LayerBlendModeSaturation = 13;
export type LayerBlendModeColor = 14;
export type LayerBlendModeLuminosity = 15;
export type LayerBlendMode =
  | LayerBlendModeNormal
  | LayerBlendModeDarken
  | LayerBlendModeMultiply
  | LayerBlendModeColorBurn
  | LayerBlendModeLighten
  | LayerBlendModeScreen
  | LayerBlendModeAdd
  | LayerBlendModeOverlay
  | LayerBlendModeSoftLight
  | LayerBlendModeHardLight
  | LayerBlendModeDifference
  | LayerBlendModeExclusion
  | LayerBlendModeHue
  | LayerBlendModeSaturation
  | LayerBlendModeColor
  | LayerBlendModeLuminosity;

export type LayerBorderPositionCenter = 0;
export type LayerBorderPositionInside = 1;
export type LayerBorderPositionOutside = 2;
export type LayerBorderPosition =
  | LayerBorderPositionCenter
  | LayerBorderPositionInside
  | LayerBorderPositionOutside;

export type LayerFillTypeSolid = 0;
export type LayerFillTypeGradient = 1;
export type LayerFillTypePattern = 4;
export type LayerFillTypeNoise = 5;
export type LayerFillType =
  | LayerFillTypeSolid
  | LayerFillTypeGradient
  | LayerFillTypePattern
  | LayerFillTypeNoise;

export type LayerTextDecorationLineUnderline = "underline";
export type LayerTextDecorationLineStrikethrough = "strikethrough";
export type LayerTextDecorationLine =
  | LayerTextDecorationLineUnderline
  | LayerTextDecorationLineStrikethrough;

export type LayerTextDecorationStyleSolid = "solid";
export type LayerTextDecorationStyleDouble = "double";
export type LayerTextDecorationStyle =
  | LayerTextDecorationStyleSolid
  | LayerTextDecorationStyleDouble;

export type LayerTextDecoration = {
  line: LayerTextDecorationLine,
  style: LayerTextDecorationStyle
};

export type LayerTextTransformNone = 0;
export type LayerTextTransformUppercase = 1;
export type LayerTextTransformLowercase = 2;
export type LayerTextTransform =
  | LayerTextTransformNone
  | LayerTextTransformUppercase
  | LayerTextTransformLowercase;

export type LayerHorizontalAlignmentLeft = 0;
export type LayerHorizontalAlignmentRight = 1;
export type LayerHorizontalAlignmentCenter = 2;
export type LayerHorizontalAlignmentJustify = 3;
export type LayerHorizontalAlignmentNatural = 4;
export type LayerHorizontalAlignment =
  | LayerHorizontalAlignmentLeft
  | LayerHorizontalAlignmentRight
  | LayerHorizontalAlignmentCenter
  | LayerHorizontalAlignmentJustify
  | LayerHorizontalAlignmentNatural;

export type LayerGradientTypeLinear = 0;
export type LayerGradientTypeRadial = 1;
export type LayerGradientTypeAngular = 2;
export type LayerGradientType =
  | LayerGradientTypeLinear
  | LayerGradientTypeRadial
  | LayerGradientTypeAngular;

export type LayerColor = {
  hex8: string,
  rgba: string,
  components: {
    red: number,
    green: number,
    blue: number,
    alpha: number
  }
};

export type LayerGradientStop = {
  position: number,
  color: LayerColor
};

export type LayerGradientLinear = {
  gradientType: LayerGradientTypeLinear,
  from: [number, number],
  to: [number, number],
  stops: LayerGradientStop[]
};

export type LayerGradientRadial = {
  gradientType: LayerGradientTypeRadial,
  from: [number, number],
  to: [number, number],
  stops: LayerGradientStop[],
  ellipseLength: number
};

export type LayerGradientAngular = {
  gradientType: LayerGradientTypeAngular,
  from: [number, number],
  to: [number, number],
  stops: LayerGradientStop[]
};

export type LayerGradient =
  | LayerGradientLinear
  | LayerGradientRadial
  | LayerGradientAngular;

export type LayerBorderSolid = {|
  fillType: LayerFillTypeSolid,
  position: LayerBorderPosition,
  thickness: number,
  color: LayerColor
|};

export type LayerBorderGradient = {|
  fillType: LayerFillTypeGradient,
  position: LayerBorderPosition,
  thickness: number,
  gradient: LayerGradient
|};

export type LayerBorder = LayerBorderSolid | LayerBorderGradient;

export type LayerBorderRadius = {
  topLeft: number,
  topRight: number,
  bottomRight: number,
  bottomLeft: number
};

export type LayerFillSolid = {
  fillType: LayerFillTypeSolid,
  blendMode: LayerBlendMode,
  opacity: number,
  color: LayerColor
};

export type LayerFillGradient = {
  fillType: LayerFillTypeGradient,
  blendMode: LayerBlendMode,
  opacity: number,
  gradient: LayerGradient
};

export type LayerFillPatternTypeTile = 0;
export type LayerFillPatternTypeFill = 1;
export type LayerFillPatternTypeStretch = 2;
export type LayerFillPatternTypeFit = 3;
export type LayerFillPatternType =
  | LayerFillPatternTypeTile
  | LayerFillPatternTypeFill
  | LayerFillPatternTypeStretch
  | LayerFillPatternTypeFit;

export type LayerFillPattern = {
  fillType: LayerFillTypePattern,
  blendMode: LayerBlendMode,
  opacity: number,
  patternFillType: LayerFillPatternType,
  patternTileScale: number,
  patternWidth?: number,
  patternHeight?: number,
  imageUrl: string,
  imageId: string
};

export type LayerFillNoiseTypeBlack = 1;
export type LayerFillNoiseTypeWhite = 2;
export type LayerFillNoiseTypeColor = 3;
export type LayerFillNoiseType =
  | LayerFillNoiseTypeBlack
  | LayerFillNoiseTypeWhite
  | LayerFillNoiseTypeColor;

export type LayerFillNoise = {
  fillType: LayerFillTypeNoise,
  blendMode: LayerBlendMode,
  opacity: number,
  noiseIndex: LayerFillNoiseType,
  noiseIntensity: number
};

export type LayerFill =
  | LayerFillSolid
  | LayerFillGradient
  | LayerFillPattern
  | LayerFillNoise;

export type LayerListStyle = "" | "disc" | "numbered";

export type LayerResizingConstraint = {
  top?: boolean,
  right?: boolean,
  bottom?: boolean,
  left?: boolean,
  fixedWidth?: boolean,
  fixedHeight?: boolean
};

export type LayerShadow = {
  color: LayerColor,
  blurRadius: number,
  spread: number,
  x: number,
  y: number
};

export type LayerShadows = {
  outer?: LayerShadow[],
  inner?: LayerShadow[]
};

export type LayerTextStyle = {
  styleName?: string,
  fixed?: boolean,
  fontName?: string,
  fontSize?: number,
  lineHeight?: number,
  characterSpacing?: number,
  paragraphSpacing?: number,
  horizontalAlignment?: LayerHorizontalAlignment,
  verticalAlignment?: number, // TODO: possible values?
  color?: LayerColor,
  listStyle?: LayerListStyle,
  textTransform?: LayerTextTransform,
  textDecoration?: LayerTextDecoration
};

export type LayerOverrideProperties = {
  ...$Diff<LayerDataProperties, { overrides: * }> // eslint-disable-line no-use-before-define
};

export type LayerOverrideData = {
  symbolId?: string,
  properties?: LayerOverrideProperties,
  [layerId: string]: LayerOverrideData
};

export type LayerDataProperties = {
  styleName?: string,
  name: string,
  isVisible: boolean,
  width: number,
  height: number,
  x: number,
  y: number,
  rotation: number,
  opacity: number,
  hasClippingMask: boolean,
  underClippingMask: boolean,
  textStyleIndex: LayerTextStyle[],
  colorIndex: LayerColor[],
  blendMode: LayerBlendMode,
  imageId?: string,
  textContent?: string,
  backgroundColor?: LayerColor,
  borderRadius?: LayerBorderRadius,
  text?: LayerTextStyle,
  fills?: LayerFill[],
  borders?: LayerBorder[],
  shadows?: LayerShadows,
  resizingConstraint?: LayerResizingConstraint,
  overrides?: LayerOverrideData
};

export type LayerData = {
  id: string,
  symbolId?: string,
  parentId?: string,
  childIds: string[],
  type:
    | "artboard"
    | "layer"
    | "symbolMaster"
    | "symbolInstance"
    | "group"
    | "text"
    | "bitmap"
    | "shapeGroup"
    | "shapePath"
    | "rectangle"
    | "oval"
    | "polygon"
    | "triangle"
    | "star"
    | "page"
    | "slice"
    | "hotspot",
  properties: LayerDataProperties
};

export type LayerDataset = {
  projectId: string,
  branchId: string,
  sha: string,
  fileId: string,
  layerId: string,
  layers: { [layerId: string]: LayerData }
};

export interface AbstractInterface {
  accessToken: string;

  activities?: {
    list: (
      objectDescriptor?: BranchDescriptor | OrganizationDescriptor | ProjectDescriptor,
      options?: ListOptions
    ) => Promise<Activity[]>
  };

  organizations?: {
    list: () => Promise<Branch[]>
  };

  projects?: {
    list: (
      organizationDescriptor?: OrganizationDescriptor,
      options: { filter?: "active" | "archived" }
    ) => Promise<Project[]>,
    info: (projectDescriptor: ProjectDescriptor) => Promise<Project>
  };

  collections: {
    list: (
      ProjectDescriptor | BranchDescriptor,
      options?: Object
    ) => Promise<Collection[]>,
    info: (CollectionDescriptor, options?: Object) => Promise<Collection>
  };

  comments?: {
    create: (
      BranchDescriptor | LayerDescriptor,
      comment: Comment
    ) => Promise<Comment>
  };

  commits: {
    list: (
      BranchDescriptor | FileDescriptor | LayerDescriptor
    ) => Promise<Commit[]>,
    info: (
      BranchDescriptor | FileDescriptor | CommitDescriptor | LayerDescriptor
    ) => Promise<Commit>
  };

  branches?: {
    list: (
      ProjectDescriptor,
      options: { filter?: "active" | "archived" | "mine" }
    ) => Promise<Branch[]>,
    info: BranchDescriptor => Promise<Branch>
  };

  changesets: {
    info: CommitDescriptor => Promise<Changeset>
  };

  files: {
    list: BranchDescriptor => Promise<File[]>,
    info: FileDescriptor => Promise<File>
  };

  pages: {
    list: FileDescriptor => Promise<Page[]>,
    info: PageDescriptor => Promise<Page>
  };

  layers: {
    list: (FileDescriptor, ListOptions) => Promise<Layer[]>,
    info: LayerDescriptor => Promise<Layer>
  };

  previews?: {
    raw: LayerDescriptor => Promise<ArrayBuffer>,
    info: LayerDescriptor => *
  };

  data: {
    info: LayerDescriptor => Promise<LayerData>
  };
}
